// Mesh.h
#pragma once
#include <vector>
#include <exception>
#include "XParser.h"

////////////////////////////////////////////////////////////////////////////////
// 
// struct Vector3
// 
// @brief:  3次元ベクトル
// @update: 2011/10/12 by Odashi
// 
////////////////////////////////////////////////////////////////////////////////
struct Vector3
{
	double x;
	double y;
	double z;
};

////////////////////////////////////////////////////////////////////////////////
// 
// struct ColorRGBA
// 
// @brief:  アルファ付き色情報
// @update: 2011/10/12 by Odashi
// 
////////////////////////////////////////////////////////////////////////////////
struct ColorRGBA
{
	double r;
	double g;
	double b;
	double a;
};

////////////////////////////////////////////////////////////////////////////////
// 
// struct ColorRGB
// 
// @brief:  アルファなし色情報
// @update: 2011/10/12 by Odashi
// 
////////////////////////////////////////////////////////////////////////////////
struct ColorRGB
{
	double r;
	double g;
	double b;
};

////////////////////////////////////////////////////////////////////////////////
// 
// struct Face
// 
// @brief:  面のインデックス情報
// @update: 2011/10/12 by Odashi
// 
////////////////////////////////////////////////////////////////////////////////
struct Face
{
	int vertex_num; // 3 or 4
	int material;
	int vertex[4];
	int normal[4];
};

////////////////////////////////////////////////////////////////////////////////
// 
// struct Material
// 
// @brief:  面のマテリアル情報
// @update: 2011/10/12 by Odashi
// 
////////////////////////////////////////////////////////////////////////////////
struct Material
{
	ColorRGBA face_color;
	double    power;
	ColorRGB  specular_color;
	ColorRGB  emissive_color;
};

////////////////////////////////////////////////////////////////////////////////
// 
// struct Mesh
// 
// @brief:  メッシュ情報
// @update: 2011/10/12 by Odashi
// 
////////////////////////////////////////////////////////////////////////////////
struct Mesh
{
	// 例外クラス
	class Exception : public std::exception
	{
	public:
		Exception(const std::string &what)
		: std::exception(("Mesh: " + what).c_str())
		{}
	};
	
	bool has_normal;
	std::vector<Vector3> vertex;
	std::vector<Vector3> normal;
	std::vector<Material> material;
	std::vector<Face> face;

	Mesh(const XDataList &data_list);
	
	void WriteOut(const char *filename);
};
